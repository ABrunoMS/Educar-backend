// <auto-generated />
using System;
using Educar.Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Educar.Backend.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808133651_AddNewFieldsToClient")]
    partial class AddNewFieldsToClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("average_score");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<decimal>("EventAverageScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("event_average_score");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_id");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("stars");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.AccountClass", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("AccountId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("account_classes");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("lat");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("lng");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("GivenAnswer")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("given_answer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("QuestStepContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_step_content_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestStepContentId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_id");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Contacts")
                        .HasColumnType("text")
                        .HasColumnName("contacts");

                    b.Property<string>("Contract")
                        .HasColumnType("text")
                        .HasColumnName("contract");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImplantationDate")
                        .HasColumnType("text")
                        .HasColumnName("implantation_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Partner")
                        .HasColumnType("text")
                        .HasColumnName("partner");

                    b.Property<string>("Regional")
                        .HasColumnType("text")
                        .HasColumnName("regional");

                    b.Property<string>("Secretary")
                        .HasColumnType("text")
                        .HasColumnName("secretary");

                    b.Property<string>("SignatureDate")
                        .HasColumnType("text")
                        .HasColumnName("signature_date");

                    b.Property<string>("SubSecretary")
                        .HasColumnType("text")
                        .HasColumnName("sub_secretary");

                    b.Property<int>("TotalAccounts")
                        .HasColumnType("integer")
                        .HasColumnName("total_accounts");

                    b.Property<string>("Validity")
                        .HasColumnType("text")
                        .HasColumnName("validity");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<int>("ContractDurationInYears")
                        .HasColumnType("integer")
                        .HasColumnName("contract_duration_in_years");

                    b.Property<DateTimeOffset>("ContractSigningDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contract_signing_date");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeliveryReport")
                        .HasColumnType("text")
                        .HasColumnName("delivery_report");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<DateTimeOffset>("ImplementationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("implementation_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int?>("RemainingAccounts")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_accounts");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TotalAccounts")
                        .HasColumnType("integer")
                        .HasColumnName("total_accounts");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GameId");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Dialogue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npc_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("NpcId");

                    b.ToTable("dialogues");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Lore")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lore");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purpose");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("games");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameNpc", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npc_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("GameId", "NpcId");

                    b.HasIndex("NpcId");

                    b.ToTable("game_npcs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameProficiencyGroup", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("ProficiencyGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("proficiency_group_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("GameId", "ProficiencyGroupId");

                    b.HasIndex("ProficiencyGroupId");

                    b.ToTable("game_proficiency_groups");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameSubject", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("GameId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("game_subjects");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("grades");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DismantleId")
                        .HasColumnType("uuid")
                        .HasColumnName("dismantle_id");

                    b.Property<decimal>("DropRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("drop_rate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemRarity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_rarity");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_type");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Lore")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lore");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Reference2D")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference2d");

                    b.Property<string>("Reference3D")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference3d");

                    b.Property<decimal>("SellValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("sell_value");

                    b.HasKey("Id");

                    b.HasIndex("DismantleId");

                    b.ToTable("items");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Reference2D")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference2d");

                    b.Property<string>("Reference3D")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference3d");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Agreement")
                        .HasColumnType("boolean")
                        .HasColumnName("agreement");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("author");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("object_name");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<string>("References")
                        .HasColumnType("text")
                        .HasColumnName("references");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("medias");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.MediaLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("current_state");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("PreviousState")
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_state");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MediaId");

                    b.ToTable("media_logs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Npc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("GoldAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("gold_amount");

                    b.Property<decimal>("GoldDropRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("gold_drop_rate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Lore")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lore");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NpcType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("npc_type");

                    b.HasKey("Id");

                    b.ToTable("npcs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.NpcItem", b =>
                {
                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npc_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("NpcId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("npc_items");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Proficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purpose");

                    b.HasKey("Id");

                    b.ToTable("proficiencies");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.ProficiencyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("proficiency_groups");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.ProficiencyGroupProficiency", b =>
                {
                    b.Property<Guid>("ProficiencyGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("proficiency_group_id");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("proficiency_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("ProficiencyGroupId", "ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("proficiency_group_proficiencies");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CombatDifficulty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("combat_difficulty");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("max_players");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<Guid?>("QuestDependencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_dependency_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<int>("TotalQuestSteps")
                        .HasColumnType("integer")
                        .HasColumnName("total_quest_steps");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UsageTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usage_template");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GradeId");

                    b.HasIndex("QuestDependencyId");

                    b.HasIndex("SubjectId");

                    b.ToTable("quests");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestProficiency", b =>
                {
                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_id");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("proficiency_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("QuestId", "ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("quest_proficiencies");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NpcBehaviour")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("npc_behaviour");

                    b.Property<string>("NpcType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("npc_type");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_id");

                    b.Property<string>("QuestStepType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quest_step_type");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("quest_steps");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ExpectedAnswers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("expected_answers");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("QuestStepContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quest_step_content_type");

                    b.Property<Guid>("QuestStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_step_id");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_type");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("QuestStepId");

                    b.ToTable("quest_step_contents");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepItem", b =>
                {
                    b.Property<Guid>("QuestStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_step_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("QuestStepId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("quest_step_items");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepMedia", b =>
                {
                    b.Property<Guid>("QuestStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_step_id");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("QuestStepId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("quest_step_medias");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepNpc", b =>
                {
                    b.Property<Guid>("QuestStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_step_id");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uuid")
                        .HasColumnName("npc_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("QuestStepId", "NpcId");

                    b.HasIndex("NpcId");

                    b.ToTable("quest_step_npcs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.SpawnPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<decimal>("X")
                        .HasColumnType("numeric")
                        .HasColumnName("x");

                    b.Property<decimal>("Y")
                        .HasColumnType("numeric")
                        .HasColumnName("y");

                    b.Property<decimal>("Z")
                        .HasColumnType("numeric")
                        .HasColumnName("z");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("spawn_points");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Account", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.School", "School")
                        .WithMany("Accounts")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Client");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.AccountClass", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Account", "Account")
                        .WithMany("AccountClasses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Class", "Class")
                        .WithMany("AccountClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Account", "Account")
                        .WithMany("Answers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.QuestStepContent", "QuestStepContent")
                        .WithMany("Answers")
                        .HasForeignKey("QuestStepContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("QuestStepContent");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Class", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Contract", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Dialogue", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Npc", "Npc")
                        .WithMany("Dialogues")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameNpc", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany("GameNpcs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Npc", "Npc")
                        .WithMany("GameNpcs")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameProficiencyGroup", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany("GameProficiencyGroups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.ProficiencyGroup", "ProficiencyGroup")
                        .WithMany("GameProficiencyGroups")
                        .HasForeignKey("ProficiencyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("ProficiencyGroup");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.GameSubject", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany("GameSubjects")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Subject", "Subject")
                        .WithMany("GameSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Item", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Item", "Dismantle")
                        .WithMany()
                        .HasForeignKey("DismantleId");

                    b.Navigation("Dismantle");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Map", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany("Maps")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.MediaLog", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.NpcItem", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Item", "Item")
                        .WithMany("NpcItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Npc", "Npc")
                        .WithMany("NpcItems")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.ProficiencyGroupProficiency", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.ProficiencyGroup", "ProficiencyGroup")
                        .WithMany("ProficiencyGroupProficiencies")
                        .HasForeignKey("ProficiencyGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Proficiency", "Proficiency")
                        .WithMany("ProficiencyGroupProficiencies")
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("ProficiencyGroup");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Quest", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Game", "Game")
                        .WithMany("Quests")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Grade", "Grade")
                        .WithMany("Quests")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Quest", "QuestDependency")
                        .WithMany()
                        .HasForeignKey("QuestDependencyId");

                    b.HasOne("Educar.Backend.Domain.Entities.Subject", "Subject")
                        .WithMany("Quests")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Grade");

                    b.Navigation("QuestDependency");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestProficiency", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Proficiency", "Proficiency")
                        .WithMany("QuestProficiencies")
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.Quest", "Quest")
                        .WithMany("QuestProficiencies")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStep", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Quest", "Quest")
                        .WithMany("QuestSteps")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepContent", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.QuestStep", "QuestStep")
                        .WithMany("Contents")
                        .HasForeignKey("QuestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestStep");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepItem", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Item", "Item")
                        .WithMany("QuestStepItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.QuestStep", "QuestStep")
                        .WithMany("QuestStepItems")
                        .HasForeignKey("QuestStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("QuestStep");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepMedia", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Media", "Media")
                        .WithMany("QuestStepMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.QuestStep", "QuestStep")
                        .WithMany("QuestStepMedias")
                        .HasForeignKey("QuestStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("QuestStep");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepNpc", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Npc", "Npc")
                        .WithMany("QuestStepNpcs")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Educar.Backend.Domain.Entities.QuestStep", "QuestStep")
                        .WithMany("QuestStepNpcs")
                        .HasForeignKey("QuestStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Npc");

                    b.Navigation("QuestStep");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.School", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Educar.Backend.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.SpawnPoint", b =>
                {
                    b.HasOne("Educar.Backend.Domain.Entities.Map", "Map")
                        .WithMany("SpawnPoints")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountClasses");

                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Class", b =>
                {
                    b.Navigation("AccountClasses");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameNpcs");

                    b.Navigation("GameProficiencyGroups");

                    b.Navigation("GameSubjects");

                    b.Navigation("Maps");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Grade", b =>
                {
                    b.Navigation("Quests");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Item", b =>
                {
                    b.Navigation("NpcItems");

                    b.Navigation("QuestStepItems");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Map", b =>
                {
                    b.Navigation("SpawnPoints");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Media", b =>
                {
                    b.Navigation("QuestStepMedias");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Npc", b =>
                {
                    b.Navigation("Dialogues");

                    b.Navigation("GameNpcs");

                    b.Navigation("NpcItems");

                    b.Navigation("QuestStepNpcs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Proficiency", b =>
                {
                    b.Navigation("ProficiencyGroupProficiencies");

                    b.Navigation("QuestProficiencies");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.ProficiencyGroup", b =>
                {
                    b.Navigation("GameProficiencyGroups");

                    b.Navigation("ProficiencyGroupProficiencies");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Quest", b =>
                {
                    b.Navigation("QuestProficiencies");

                    b.Navigation("QuestSteps");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStep", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("QuestStepItems");

                    b.Navigation("QuestStepMedias");

                    b.Navigation("QuestStepNpcs");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.QuestStepContent", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.School", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Educar.Backend.Domain.Entities.Subject", b =>
                {
                    b.Navigation("GameSubjects");

                    b.Navigation("Quests");
                });
#pragma warning restore 612, 618
        }
    }
}
